#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–¥—É–ª—è dental_analysis
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import json
from dental_analysis import replace_cyst_volume, analyze_cyst_volume, calculate_root_cyst_overlap, visualize_root_cyst_overlap


def main():
    print("ü¶∑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 60)
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    image_path = "image_test.png"
    mask_path = "test_output_rc/image_test_mask.png"
    tooth_masks_dir = "test_output_teeth"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(image_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not os.path.exists(mask_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {mask_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not os.path.exists(tooth_masks_dir):
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tooth_masks_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã:")
    print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
    print(f"   –ú–∞—Å–∫–∞ –∫–∏—Å—Ç—ã: {mask_path}")
    print(f"   –ú–∞—Å–∫–∏ –∑—É–±–æ–≤: {tooth_masks_dir}")
    print()
    
    # 1. –ê–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–∞ –∫–∏—Å—Ç—ã
    print("üìä 1. –ê–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–∞ –∫–∏—Å—Ç—ã")
    print("-" * 30)
    
    cyst_analysis = analyze_cyst_volume(mask_path)
    
    if "error" in cyst_analysis:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {cyst_analysis['error']}")
    else:
        print(f"üìà –ù–∞–π–¥–µ–Ω–æ –∫–∏—Å—Ç: {cyst_analysis['total_cysts']}")
        print(f"üìè –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {cyst_analysis['total_area_pixels']:.1f} –ø–∏–∫—Å–µ–ª–µ–π ({cyst_analysis['total_area_mm2']:.1f} –º–º¬≤)")
        
        for cyst in cyst_analysis['cysts']:
            print(f"   ü¶∑ –ö–∏—Å—Ç–∞ #{cyst['id']}:")
            print(f"      –ü–ª–æ—â–∞–¥—å: {cyst['area_pixels']:.1f} –ø–∏–∫—Å–µ–ª–µ–π ({cyst['area_mm2']:.1f} –º–º¬≤)")
            print(f"      –ü–µ—Ä–∏–º–µ—Ç—Ä: {cyst['perimeter_pixels']:.1f} –ø–∏–∫—Å–µ–ª–µ–π ({cyst['perimeter_mm']:.1f} –º–º)")
            print(f"      –î–∏–∞–º–µ—Ç—Ä: {cyst['equivalent_diameter_pixels']:.1f} –ø–∏–∫—Å–µ–ª–µ–π ({cyst['equivalent_diameter_mm']:.1f} –º–º)")
            print(f"      –¶–µ–Ω—Ç—Ä: {cyst['center']}")
    
    print()
    
    # 2. –ó–∞–º–µ–Ω–∞ –æ–±—ä—ë–º–∞ –∫–∏—Å—Ç—ã —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    print("üîß 2. –ó–∞–º–µ–Ω–∞ –æ–±—ä—ë–º–∞ –∫–∏—Å—Ç—ã")
    print("-" * 30)
    
    methods = [
        ("interpolation", "–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è", "cyst_replaced_interpolation.png"),
        ("blur", "–†–∞–∑–º—ã—Ç–∏–µ", "cyst_replaced_blur.png"),
        ("color_fill", "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–º", "cyst_replaced_color.png")
    ]
    
    for method, method_name, output_file in methods:
        output_path = f"test_output_rc/{output_file}"
        
        print(f"üîÑ –ú–µ—Ç–æ–¥: {method_name}")
        
        if method == "color_fill":
            success = replace_cyst_volume(image_path, mask_path, output_path, method, (200, 200, 200))
        else:
            success = replace_cyst_volume(image_path, mask_path, output_path, method)
        
        if success:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_path}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        
        print()
    
    # 3. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∑—É–±–æ–≤ –∫–∏—Å—Ç–æ–π
    print("ü¶∑ 3. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∑—É–±–æ–≤ –∫–∏—Å—Ç–æ–π")
    print("-" * 45)
    
    root_analysis = calculate_root_cyst_overlap(tooth_masks_dir, mask_path)
    
    if "error" in root_analysis:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {root_analysis['error']}")
    else:
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –∑—É–±–æ–≤: {root_analysis['total_teeth']}")
        print(f"   –ü–æ—Ä–∞–∂—ë–Ω–Ω—ã—Ö –∑—É–±–æ–≤: {root_analysis['affected_teeth']}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {root_analysis['average_overlap_percentage']}%")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã–µ –∑—É–±—ã
        affected_teeth = [t for t in root_analysis['teeth_analysis'] if t['is_affected']]
        if affected_teeth:
            print(f"   ü¶∑ –ü–æ—Ä–∞–∂—ë–Ω–Ω—ã–µ –∑—É–±—ã:")
            for tooth in affected_teeth:
                print(f"      FDI {tooth['fdi_number']}: {tooth['overlap_percentage']}% ({tooth['severity']})")
        else:
            print(f"   ‚úÖ –ü–æ—Ä–∞–∂—ë–Ω–Ω—ã—Ö –∑—É–±–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    print()
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π
    print("üé® 4. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π")
    print("-" * 45)
    
    visualization_path = "test_output_rc/root_cyst_visualization.png"
    success = visualize_root_cyst_overlap(
        tooth_masks_dir, 
        mask_path, 
        image_path, 
        visualization_path
    )
    
    if success:
        print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {visualization_path}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    print()
    
    # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    print("üíæ 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("-" * 30)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∏—Å—Ç—ã
    cyst_analysis_file = "test_output_rc/cyst_analysis.json"
    with open(cyst_analysis_file, 'w', encoding='utf-8') as f:
        json.dump(cyst_analysis, f, indent=2, ensure_ascii=False)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π
    root_analysis_file = "test_output_rc/root_cyst_analysis.json"
    with open(root_analysis_file, 'w', encoding='utf-8') as f:
        json.dump(root_analysis, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–∏—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {cyst_analysis_file}")
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {root_analysis_file}")
    
    print()
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_output_rc/")
    print()
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("   1. replace_cyst_volume() - –∑–∞–º–µ–Ω–∞ –æ–±—ä—ë–º–∞ –∫–∏—Å—Ç—ã")
    print("   2. analyze_cyst_volume() - –∞–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–∞ –∫–∏—Å—Ç—ã")
    print("   3. calculate_root_cyst_overlap() - –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∫–∏—Å—Ç–æ–π")
    print("   4. visualize_root_cyst_overlap() - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π")


if __name__ == "__main__":
    main()
