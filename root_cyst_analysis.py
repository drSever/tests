#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∑—É–±–æ–≤ –∫–∏—Å—Ç–æ–π
–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∑—É–±–∞ –∏ —Å–æ–∑–¥–∞—ë—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
"""

import os
import json
from dental_analysis import calculate_root_cyst_overlap, visualize_root_cyst_overlap


def main():
    print("ü¶∑ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∑—É–±–æ–≤ –∫–∏—Å—Ç–æ–π")
    print("=" * 50)
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    tooth_masks_dir = "test_output_teeth"
    cyst_mask_path = "test_output_rc/image_test_mask.png"
    original_image_path = "image_test.png"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(tooth_masks_dir):
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {tooth_masks_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if not os.path.exists(cyst_mask_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {cyst_mask_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not os.path.exists(original_image_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {original_image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã:")
    print(f"   –ú–∞—Å–∫–∏ –∑—É–±–æ–≤: {tooth_masks_dir}")
    print(f"   –ú–∞—Å–∫–∞ –∫–∏—Å—Ç—ã: {cyst_mask_path}")
    print(f"   –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {original_image_path}")
    print()
    
    # 1. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π
    print("üìä 1. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∑—É–±–æ–≤ –∫–∏—Å—Ç–æ–π")
    print("-" * 45)
    
    output_json = "test_output_rc/root_cyst_analysis.json"
    analysis_result = calculate_root_cyst_overlap(
        tooth_masks_dir, 
        cyst_mask_path, 
        output_json
    )
    
    if "error" in analysis_result:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_result['error']}")
        return
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –∑—É–±–æ–≤: {analysis_result['total_teeth']}")
    print(f"   –ü–æ—Ä–∞–∂—ë–Ω–Ω—ã—Ö –∑—É–±–æ–≤: {analysis_result['affected_teeth']}")
    print(f"   –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {analysis_result['average_overlap_percentage']}%")
    print()
    
    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã–º –∑—É–±–∞–º
    affected_teeth = [t for t in analysis_result['teeth_analysis'] if t['is_affected']]
    
    if affected_teeth:
        print("ü¶∑ –ü–æ—Ä–∞–∂—ë–Ω–Ω—ã–µ –∑—É–±—ã:")
        print("-" * 30)
        
        for tooth in affected_teeth:
            print(f"   –ó—É–± FDI {tooth['fdi_number']}:")
            print(f"      –û–±—â–µ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ: {tooth['overlap_percentage']}%")
            print(f"      –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–Ω—è: {tooth['root_overlap_percentage']}%")
            print(f"      –¢—è–∂–µ—Å—Ç—å: {tooth['severity']}")
            print()
    else:
        print("‚úÖ –ü–æ—Ä–∞–∂—ë–Ω–Ω—ã—Ö –∑—É–±–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        print()
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    print("üé® 2. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è")
    print("-" * 35)
    
    output_visualization = "test_output_rc/root_cyst_visualization.png"
    success = visualize_root_cyst_overlap(
        tooth_masks_dir,
        cyst_mask_path,
        original_image_path,
        output_visualization
    )
    
    if success:
        print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {output_visualization}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    print()
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
    print("üìÑ 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
    print("-" * 30)
    
    report_path = "test_output_rc/root_cyst_report.txt"
    create_detailed_report(analysis_result, report_path)
    
    print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {report_path}")
    
    print()
    print("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_output_rc/")


def create_detailed_report(analysis_result: dict, report_path: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
    """
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("–û–¢–ß–Å–¢ –û –ü–û–†–ê–ñ–ï–ù–ò–ò –ö–û–†–ù–ï–ô –ó–£–ë–û–í –ö–ò–°–¢–û–ô\n")
        f.write("=" * 50 + "\n\n")
        
        f.write("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
        f.write("-" * 20 + "\n")
        f.write(f"–í—Å–µ–≥–æ –∑—É–±–æ–≤: {analysis_result['total_teeth']}\n")
        f.write(f"–ü–æ—Ä–∞–∂—ë–Ω–Ω—ã—Ö –∑—É–±–æ–≤: {analysis_result['affected_teeth']}\n")
        f.write(f"–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {analysis_result['average_overlap_percentage']}%\n")
        f.write(f"–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {analysis_result['total_overlap_area']} –ø–∏–∫—Å–µ–ª–µ–π\n\n")
        
        f.write("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ó–£–ë–ê–ú:\n")
        f.write("-" * 30 + "\n")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑—É–±—ã –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        sorted_teeth = sorted(
            analysis_result['teeth_analysis'], 
            key=lambda x: x['overlap_percentage'], 
            reverse=True
        )
        
        for tooth in sorted_teeth:
            f.write(f"–ó—É–± FDI {tooth['fdi_number']}:\n")
            f.write(f"  –û–±—â–µ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ: {tooth['overlap_percentage']}%\n")
            f.write(f"  –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–Ω—è: {tooth['root_overlap_percentage']}%\n")
            f.write(f"  –ü–ª–æ—â–∞–¥—å –∑—É–±–∞: {tooth['total_area_pixels']} –ø–∏–∫—Å–µ–ª–µ–π\n")
            f.write(f"  –ü–ª–æ—â–∞–¥—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {tooth['overlap_area_pixels']} –ø–∏–∫—Å–µ–ª–µ–π\n")
            f.write(f"  –î–ª–∏–Ω–∞ –∫–æ—Ä–Ω—è: {tooth['root_length_pixels']} –ø–∏–∫—Å–µ–ª–µ–π\n")
            f.write(f"  –¢—è–∂–µ—Å—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {tooth['severity']}\n")
            f.write(f"  –°—Ç–∞—Ç—É—Å: {'–ü–æ—Ä–∞–∂—ë–Ω' if tooth['is_affected'] else '–ù–µ –ø–æ—Ä–∞–∂—ë–Ω'}\n")
            f.write("\n")
        
        f.write("–ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –¢–Ø–ñ–ï–°–¢–ò –ü–û–†–ê–ñ–ï–ù–ò–Ø:\n")
        f.write("-" * 40 + "\n")
        f.write("0% - –ù–µ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è\n")
        f.write("1-9% - –õ—ë–≥–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ\n")
        f.write("10-29% - –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ\n")
        f.write("30-49% - –¢—è–∂—ë–ª–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ\n")
        f.write("50%+ - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ\n\n")
        
        f.write("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n")
        f.write("-" * 15 + "\n")
        
        critical_teeth = [t for t in analysis_result['teeth_analysis'] 
                         if t['severity'] in ['–¢—è–∂—ë–ª–æ–µ', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ']]
        
        if critical_teeth:
            f.write("‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–õ–£–ß–ê–ò:\n")
            for tooth in critical_teeth:
                f.write(f"   - –ó—É–± FDI {tooth['fdi_number']}: {tooth['overlap_percentage']}% –ø–æ—Ä–∞–∂–µ–Ω–∏—è\n")
            f.write("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞!\n\n")
        
        affected_count = analysis_result['affected_teeth']
        if affected_count > 0:
            f.write(f"üìã –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n")
            f.write(f"   - –ü–æ—Ä–∞–∂–µ–Ω–æ {affected_count} –∑—É–±–æ–≤ –∏–∑ {analysis_result['total_teeth']}\n")
            f.write(f"   - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ—Ä–∞–∂—ë–Ω–Ω—ã—Ö –∑—É–±–æ–≤\n")
            f.write(f"   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å\n")
        else:
            f.write("‚úÖ –ü–æ—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä.\n")


if __name__ == "__main__":
    main()
